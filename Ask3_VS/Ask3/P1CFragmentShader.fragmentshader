#version 330 core

in vec4 fragmentColor;
in vec2 fragmentUV;
in vec3 Position_worldspace;
in vec3 Normal_cameraspace;
in vec3 EyeDirection_cameraspace;
in vec3 LightDirection_cameraspace;

// Final output
out vec4 color;

// Uniforms
uniform sampler2D ourTexture;
uniform bool useTexture; // Uniform to decide if texture should be used

void main() {
    vec4 LightColor = vec4(1.0f, 0.8f, 0.5f, 1.0f);
    float LightPower = 400.0f;

    vec4 MaterialDiffuseColor = texture(ourTexture, fragmentUV);
    vec4 MaterialAmbientColor = vec4(0.1f, 0.1f, 0.1f, 1.0f) * MaterialDiffuseColor;
    vec4 MaterialSpecularColor = vec4(0.3f, 0.3f, 0.3f, 1.0f);

    // Distance to the light
    float distance = length(LightDirection_cameraspace);

    // Normalize the vectors
    vec3 n = normalize(Normal_cameraspace);
    vec3 l = normalize(LightDirection_cameraspace);

    // Compute the cosine of the angle between the normal and the light direction
    float cosTheta = clamp(dot(n, l), 0, 1);

    // Eye direction and reflection direction
    vec3 E = normalize(EyeDirection_cameraspace);
    vec3 R = reflect(-l, n);

    // Compute the cosine of the angle between the eye direction and the reflection direction
    float cosAlpha = clamp(dot(E, R), 0, 1);

    // Calculate the lighting
    vec4 LightingEffect = MaterialAmbientColor +
                          MaterialDiffuseColor *
                          LightColor *
                          LightPower *
                          cosTheta / (distance * distance) +
                          MaterialSpecularColor *
                          LightColor *
                          LightPower *
                          pow(cosAlpha, 5) / (distance * distance);
    if (useTexture) {
        color = LightingEffect;
    } else {
        color = fragmentColor*LightingEffect;
    }
}
